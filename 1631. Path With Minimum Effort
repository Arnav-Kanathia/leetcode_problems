class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();

        vector<vector<int>> efforts(n, vector<int>(m, 1e9));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        pq.push({0, {0,0}});
        efforts[0][0] = 0;

        while(!pq.empty()){
            int row = pq.top().second.first;
            int col = pq.top().second.second;
            if(row == n-1 && col == m-1) return pq.top().first;
            pq.pop();

            vector<pair<int, int>> directions = {{0,1}, {1,0}, {0,-1}, {-1,0}};
            for(auto dir:directions){
                int newRow = dir.first + row;
                int newCol = dir.second + col;

                if ((newRow >= 0 && newRow < n) && (newCol >= 0 && newCol < m) &&
                    max(abs(heights[row][col] - heights[newRow][newCol]), efforts[row][col]) < efforts[newRow][newCol]) {
                    efforts[newRow][newCol] = max(abs(heights[row][col] - heights[newRow][newCol]), efforts[row][col]);
                    pq.push({efforts[newRow][newCol], {newRow, newCol}});
                }

            }
        }
        return 0;
    }
};
