class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftchild, vector<int>& rightchild) {
        vector<int> indegree(n, 0);
        for(int i = 0; i<n; i++){
            if(leftchild[i] != -1) indegree[leftchild[i]]++;
            if(rightchild[i] != -1) indegree[rightchild[i]]++;
        }

        int root = -1;
        for(int i = 0; i<n; i++){
            if(indegree[i] == 0){
                if(root == -1) root = i;
                else return false;
            }
        }

        if(root == -1) return false;

        vector<int> visited(n, 0);
        queue<int> q;
        q.push(root);
        while(!q.empty()){
            int node = q.front();
            q.pop();
            if(visited[node]) return false;
            visited[node] = 1;

            if(leftchild[node] != -1) q.push(leftchild[node]);
            if(rightchild[node] != -1) q.push(rightchild[node]);
        }

        return accumulate(visited.begin(), visited.end(), 0) == n;
    }
};
